#!/usr/bin/env ruby

require "open3"
require 'optparse'
require 'git/gsub/ruby'
require 'pathname'

def text_file?(filename)
  file_type, status = Open3.capture2e("file", filename.to_s)
  status.success? && file_type.include?("text")
end

evaluate = false
debug = false

opts = OptionParser.new do |o|
  o.version = Git::Gsub::Ruby::VERSION
  o.banner = <<-USAGE
Usage:
    ruby #{File.basename(__FILE__)} [options] from to [glob]
    from      - gsub from string or ruby script
    to        - gsub to string or ruby script
    glob      - (optional)ruby glob pattern.

Example:
    git gsub hoge piyo
    git gsub -e '/hoge([0-9]+)/' 'piyo\#{$1.to_i + 1}'
    git gsub -e '/belongs_to :(\w+)([^#\\n]*)(#.*)?$/' '"belongs_to :\#{$1}\#{$2.include?("optional: false") ? $2 : $2.strip + ", optional: true"}\#{$3 != nil ? " " + $3 : ""}"' 'app/models/**/*.rb'
Options:
  USAGE
  o.on('-e', '--eval', 'Evaluate `from` and `to` as a ruby script and replace the `to` string with the result of `from`.') { evaluate = true }
  o.on('-d', '--debug', 'Print debug.') { debug = true }
end

opts.parse!(ARGV)

begin
  raise "Invalid argument" if ARGV.size != 2 && ARGV.size != 3

  from_str, to_str, glob_pattern = ARGV
  from = evaluate ? eval(from_str) : from_str
  glob_pattern ||= '**/*'
  puts "from: #{from.inspect}, to_str: #{to_str}, glob: #{glob}" if debug
  glob = Pathname.glob(glob_pattern, File::FNM_DOTMATCH)

  lsfiles = `git ls-files`
  files = lsfiles.lines.to_a.map { |path| Pathname.new(path.strip) } & glob
  p files

  files.each do |path|
    next unless text_file? path
    buf = nil
    open(path) do |f|
      old_buf = f.read
      begin
        if evaluate
          buf = old_buf.gsub(from) { eval(to_str) }
        else
          buf = old_buf.gsub(from, to_str)
        end
        buf = nil if old_buf == buf
      rescue => ex
        puts "error:#{ex.inspect} on:#{path} backtrace:#{ex.backtrace}"
        next
      end
    end
    if buf
      puts "replaced:#{path}" if debug
      open(path, "w") do |f|
        f.write buf
      end
    end
  end
rescue => ex
  puts ex.message
  if debug
    puts ex.backtrace
  end
  puts opts.help
end
